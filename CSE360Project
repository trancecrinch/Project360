import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileNotFoundException;
import java.io.PrintWriter;

import javax.swing.*;

import PROJECT.Graph.Node;

public class networkDiagram extends JFrame implements ActionListener {

	//-----------------------------------------------------------------------------------Graph stuff
	Graph g = new Graph();
	
	public static void main(String[] args) {
		new networkDiagram().setVisible(true);
	}
	

	public boolean CheckError(Node x) {
	    for (int i = 0; i < g.nodeArray.length; i++) {
	        if(g.nodeArray[i].symbol != '_') {
	        	System.out.println("Testing");
	        	if(x.symbol == g.nodeArray[i].symbol) {
	        		return true;
	        	}
	        }
	    }
	    if (ParentCheck(x, x) == true) {
	        return true;
	    }

	    return false;

	    }


	//start with the node being added and look at the parents for the node that is being //added
	//recursively check until the parents are empty, or the node being added is found


	public boolean ParentCheck(Node x, Node y) {
	    for (int i = 0; i < y.dependencies.length; i++) {
	        if (x.symbol == y.dependencies[i]) {
	            return true;
	        }
	        for (int j = 0; j < g.nodeArray.length; j++) {
	            if (g.nodeArray[j].symbol != '_') {
	            if (g.nodeArray[j].symbol == y.dependencies[i]) {
	                ParentCheck(x, g.nodeArray[j]);
	            }
	        }
	        }
	    }
	    return false;
	}
	

	public String pathFinder(){
	    String path = "";
	    int duration = 0;
	    for(int i = 0; i <= g.nodeArray.length; i++){
	            if(g.nodeArray[i].dependencies == null){
	                //path = g.nodeArray[i].symbol;
	                duration += g.nodeArray[i].duration;
	            }
	            else if(g.nodeArray[i].dependencies != null){
	                for(int j = 0; j <= g.nodeArray[i].dependencies.length; j++){
	                    if(g.nodeArray[i].dependencies[j] == g.nodeArray[i+1].symbol){
	                        path += ", " + g.nodeArray[i+1].symbol;
	                        duration += g.nodeArray[i+1].duration;
	                    }
	                    else{
	                        path += g.nodeArray[i].symbol;
	                        duration += g.nodeArray[i].duration;
	                    }
	                }
	            }
	    }
	    path += " - " + duration;
	    return path;
	}


	
	int activityCounter = 0;//Used to go down the list of nodes in the graph

	private networkDiagram(){
		super("PERT Pathfinder");
		
		g.setupGraph(g.nodeArray);
		//------------------------------------------------------------------------------------The Window
		setLayout(null);
		setSize(800,400);
		setResizable(false);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		//------------------------------------------------------------------------------------The Bar
		JMenuBar bar = new JMenuBar();
		JMenu file = new JMenu("File");
		JMenuItem EXIT = new JMenuItem("Exit");
		JMenuItem SAVE = new JMenuItem("Save");
		JMenuItem RESTART = new JMenuItem("Restart");
		file.add(SAVE);
		file.addSeparator();
		file.add(RESTART);
		file.add(EXIT);
		bar.add(file);
		
		EXIT.addActionListener(this);
		SAVE.addActionListener(this);
		RESTART.addActionListener(this);
		

		setJMenuBar(bar);
		//----------------------------------------------------------------------------------------Buttons		
		JButton addButton = new JButton("Add Activity");
		addButton.setBounds(10, 280, 100, 50);
		add(addButton);
		JButton changeDuration = new JButton("Adjust Duration");
		changeDuration.setBounds(120,280,130,50);
		add(changeDuration);
		JButton pathButton = new JButton("Find Pathways");
		pathButton.setBounds(260,280,120,50);
		add(pathButton);		
		JButton helpButton = new JButton("Help");
		helpButton.setBounds(390,280,80,50);
		add(helpButton);
		JButton aboutButton = new JButton("About");
		aboutButton.setBounds(480,280,80,50);
		add(aboutButton);
		
		
		//----------------------------------------------------------------------------------------Labels
		JLabel label1 = new JLabel("Activity Name");
		label1.setLocation(10,35);label1.setSize(400,10);
		JTextArea activityName = new JTextArea(100,100);
		
		JLabel label2 = new JLabel("Symbol");
		label2.setLocation(10,85);label2.setSize(400,10);
		JTextArea activitySymbol = new JTextArea(100,100);
		
		JLabel label3 = new JLabel("Activity Dependencies");
		label3.setLocation(10,135);label3.setSize(400,10);
		JTextArea depend = new JTextArea(100,100);
		
		JLabel label4 = new JLabel("Activity Duration");
		label4.setLocation(10,185);label4.setSize(400,10);
		JTextArea time = new JTextArea(100,100);	
		
		JLabel monitor = new JLabel("Welcome to PERT Pathfinder");
		monitor.setLocation(430,10); monitor.setSize(340,300);
		
		
		activityName.setBounds(10,50,375,20);
		activitySymbol.setBounds(10,100,375,20);
		depend.setBounds(10,150,375,20);
		time.setBounds(10,200,375,20);
		
		add(activityName);
		add(activitySymbol);
		add(depend);
		add(time);
		add(label1);
		add(label2);
		add(label3);
		add(label4);
		add(monitor);
				
		
		//---------------------------------------------------------------------------------Button actions
		addButton.addActionListener(new ActionListener() { 
			public void actionPerformed(ActionEvent e) {
				String a = activityName.getText();
				char s = activitySymbol.getText().charAt(0);
				char[] d = new char[10];
				if(activityCounter!=0){
					d = depend.getText().toCharArray();
				}
				int t = Integer.parseInt(time.getText());
				Node addedNode=g.newNode(a,s,d,t);
				System.out.println(addedNode.name+"  "+addedNode.symbol+"  "+addedNode.dependencies[0]+"  "+addedNode.duration+"  ");
				
				if(CheckError(addedNode)==true){
					System.out.println("ERROR");
					monitor.setText("Cycle or Already Added Activity detected. Entry denied.");
				}
				else{
					System.out.println("no error");
					g.nodeArray[activityCounter] = addedNode;
					activityCounter++;
					monitor.setText("Activity has been added.");
				}
				System.out.println(activityCounter);

			}
		});
		changeDuration.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent e){
				char s = activitySymbol.getText().charAt(0);
				int t = Integer.parseInt(time.getText());
				
				int counter = 0;
				while(g.nodeArray[counter].symbol!=s && g.nodeArray[counter].symbol!='_'){
					counter++;
				}
				if(g.nodeArray[counter].symbol=='_'){
					monitor.setText("That activity doesn't exist");
				}
				else{
					g.nodeArray[counter].symbol=s;
					g.nodeArray[counter].duration=t;
					monitor.setText("Activity duration has been changed.");
				}
			}
		});
		
		pathButton.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent e){
				System.out.println(pathFinder());
			}
		});
		helpButton.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent e){
				monitor.setText("<html>Enter any name for the Activity Name.<br/><br/>Enter a single character for the Symbol.<br/><br/>Enter the symbols"
						+ " of each activity that this new activity depends on with no spaces.<br/>Example: BCD<br/>It is recommended that you do not enter any dependencies for your first activity.<br/>"
						+ "<br/>Enter an integer for the time.<br/>"
						+ "<br/>When you are done adding activities, press the 'Find Pathways' button to find all possible pathways in the chart</html>");
			}
		});
		aboutButton.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent e){
				monitor.setText("<html>PERT Pathfinder<br/><br/>Developers:<br/>Zakarya Omar Agha<br/>Hayden Owen<br/>Christopher Persson<br/>Luke Shumaker<br/><br/>October 12, 2018</html>");
			}
		});
		
	}

	
	//------------------------------------------------------------------------------Outside Action Performed
	@Override
	public void actionPerformed(ActionEvent e) {
		if (e.getActionCommand().equals("Exit")){
			System.exit(0);
		}
		if(e.getActionCommand().equals("Save")){
            String name = JOptionPane.showInputDialog("What is the name of your graph?", null);
            String date = JOptionPane.showInputDialog("Date and Time of Creation?",null);
			
            Node temp;
            for (int i=0;i<activityCounter;i++) 
            {
                for (int j=i+1;j<activityCounter;j++) 
                {
                    if (g.nodeArray[i].name.compareTo(g.nodeArray[j].name)>0) 
                    {
                        System.out.println(g.nodeArray[i].name);
                        System.out.println(g.nodeArray[j].name);
                    	temp = g.newNode(g.nodeArray[i].name,g.nodeArray[i].symbol,g.nodeArray[i].dependencies,g.nodeArray[i].duration);
                        g.nodeArray[i] = g.nodeArray[j];
                        System.out.println(temp.name);
                        g.nodeArray[j] = temp;
                    }
                }
            }
            
			String filename = DIRECTORY+name+".txt";
			try {
				PrintWriter graphData = new PrintWriter(filename);
				graphData.println(name);
				graphData.println(date);
				graphData.println();
				graphData.println("ACTIVITIES");
				for(int i=0;i<activityCounter;i++){
					graphData.println(g.nodeArray[i].name+"\t"+g.nodeArray[i].duration);
				}
				graphData.println();
				graphData.println("POSSIBLE PATHWAYS");
				graphData.close();
			} catch (FileNotFoundException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
		if(e.getActionCommand().equals("Restart")){
			activityCounter = 0;
			g.setupGraph(g.nodeArray);
		}
	}
}
